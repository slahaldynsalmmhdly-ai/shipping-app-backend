const User = require('../models/User');

/**
 * ุฅูุดุงุก ุฅุดุนุงุฑุงุช ูููุชุงุจุนูู ุนูุฏ ูุดุฑ ููุดูุฑ/ุฅุนูุงู ุฌุฏูุฏ
 * @param {String} userId - ูุนุฑู ุงููุณุชุฎุฏู ุงูุฐู ูุดุฑ ุงููุญุชูู
 * @param {String} itemId - ูุนุฑู ุงูููุดูุฑ/ุงูุฅุนูุงู
 * @param {String} itemType - ููุน ุงููุญุชูู: 'post', 'shipmentAd', 'emptyTruckAd'
 * @param {Number} feedPercentage - ูุณุจุฉ ุงูููุดูุฑุงุช ุงูุชู ุณุชุธูุฑ ูู ุงูุฎูุงุตุฉ (0.10 ุฃู 0.15)
 */
async function createFollowingPostNotifications(userId, itemId, itemType, feedPercentage = 0.15) {
  try {
    // ุฌูุจ ุงููุณุชุฎุฏู ุงูุฐู ูุดุฑ ุงููุญุชูู
    const publisher = await User.findById(userId).select('followers');
    
    if (!publisher || !publisher.followers || publisher.followers.length === 0) {
      return; // ูุง ููุฌุฏ ูุชุงุจุนูู
    }
    
    const followers = publisher.followers;
    
    // ุญุณุงุจ ุนุฏุฏ ุงููุชุงุจุนูู ุงูุฐูู ุณูุฑูู ุงูููุดูุฑ ูู ุงูุฎูุงุตุฉ
    const feedCount = Math.ceil(followers.length * feedPercentage);
    
    // ุฎูุท ุงููุชุงุจุนูู ุจุดูู ุนุดูุงุฆู ูุงุฎุชูุงุฑ ูู ุณูุฑู ุงูููุดูุฑ ูู ุงูุฎูุงุตุฉ
    const shuffledFollowers = [...followers].sort(() => Math.random() - 0.5);
    const followersInFeed = new Set(shuffledFollowers.slice(0, feedCount).map(id => id.toString()));
    
    // ุฅูุดุงุก ุฅุดุนุงุฑุงุช ูุฌููุน ุงููุชุงุจุนูู
    const notificationPromises = followers.map(async (followerId) => {
      const isInFeed = followersInFeed.has(followerId.toString());
      
      // ุฅูุดุงุก ูุงุฆู ุงูุฅุดุนุงุฑ
      const notification = {
        type: 'new_following_post',
        sender: userId,
        itemType: itemType,
        read: false,
        createdAt: new Date(),
        showInFeed: isInFeed // ูุนูููุฉ ุฅุถุงููุฉ ูุชุชุจุน ูุง ุฅุฐุง ูุงู ุงูููุดูุฑ ุณูุธูุฑ ูู ุงูุฎูุงุตุฉ
      };
      
      // ุฅุถุงูุฉ ุงููุฑุฌุน ุงูููุงุณุจ ุญุณุจ ููุน ุงููุญุชูู
      if (itemType === 'post') {
        notification.post = itemId;
      } else if (itemType === 'shipmentAd') {
        notification.shipmentAd = itemId;
      } else if (itemType === 'emptyTruckAd') {
        notification.emptyTruckAd = itemId;
      }
      
      // ุฅุถุงูุฉ ุงูุฅุดุนุงุฑ ูููุชุงุจุน
      await User.findByIdAndUpdate(
        followerId,
        { $push: { notifications: notification } },
        { new: true }
      );
    });
    
    await Promise.all(notificationPromises);
    
    console.log(`โ ุชู ุฅูุดุงุก ${followers.length} ุฅุดุนุงุฑ ููููุดูุฑ ${itemId} ูู ููุน ${itemType}`);
    console.log(`๐ ${feedCount} ูุชุงุจุน ุณูุฑูู ุงูููุดูุฑ ูู ุงูุฎูุงุตุฉุ ${followers.length - feedCount} ูู ุงูุฅุดุนุงุฑุงุช ููุท`);
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก ุฅุดุนุงุฑุงุช ุงููุชุงุจุนูู:', error);
  }
}

/**
 * ุญุฐู ุฅุดุนุงุฑุงุช ุงูููุดูุฑ ุนูุฏ ุญุฐูู
 * @param {String} itemId - ูุนุฑู ุงูููุดูุฑ/ุงูุฅุนูุงู
 * @param {String} itemType - ููุน ุงููุญุชูู
 */
async function deleteFollowingPostNotifications(itemId, itemType) {
  try {
    const filter = { 'notifications.itemType': itemType };
    
    if (itemType === 'post') {
      filter['notifications.post'] = itemId;
    } else if (itemType === 'shipmentAd') {
      filter['notifications.shipmentAd'] = itemId;
    } else if (itemType === 'emptyTruckAd') {
      filter['notifications.emptyTruckAd'] = itemId;
    }
    
    await User.updateMany(
      filter,
      { $pull: { notifications: { [itemType === 'post' ? 'post' : itemType === 'shipmentAd' ? 'shipmentAd' : 'emptyTruckAd']: itemId } } }
    );
    
    console.log(`๐๏ธ ุชู ุญุฐู ุฅุดุนุงุฑุงุช ุงูููุดูุฑ ${itemId} ูู ููุน ${itemType}`);
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุญุฐู ุฅุดุนุงุฑุงุช ุงูููุดูุฑ:', error);
  }
}

module.exports = {
  createFollowingPostNotifications,
  deleteFollowingPostNotifications
};
